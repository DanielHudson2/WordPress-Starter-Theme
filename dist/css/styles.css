/**
 * CORE MIXINS
*/
/**
 * Calculate the rem value of a unit (eventually)
 */
/**
* SITE-HEADER
**/
.c-site-header {
  display: flex;
  flex-wrap: wrap;
}

/**
* SITE-BRANDING
**/
.c-site-branding {
  display: flex;
}
.c-site-branding__logo {
  width: 12.5rem;
  padding: 0.625rem 1.25rem 0.625rem 1.25rem;
}

/**
* PRIMARY-NAVIGATION
**/
.c-primary-navigation {
  width: 100%;
}
/*# sourceMappingURL=data:application/json;charset=utf8;base64, */
